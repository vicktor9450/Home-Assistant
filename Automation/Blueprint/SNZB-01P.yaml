blueprint:
  name: Controller - SONOFF SNZB-01P Wireless Switch (Zigbee2MQTT)
  description: |
    Control Home Assistant using the SONOFF SNZB-01P Zigbee wireless button via Zigbee2MQTT.

    Available actions:
      • Single press
      • Double press
      • Long press

  domain: automation
  input:
    controller_entity:
      name: (Required) Controller Entity
      description:
        The action sensor of the controller to use for the automation.
        Choose a value only if the remote is integrated with Zigbee2MQTT.
      default: ""
      selector:
        entity:
          domain:
            - sensor
          multiple: false
    helper_last_controller_event:
      name: (Required) Helper - Last Controller Event
      description:
        Input Text used to store the last event fired by the controller.
        You will need to manually create a text input entity for this, please read
        the blueprint Additional Notes for more info.
      default: ""
      selector:
        entity:
          domain:
            - input_text
          multiple: false
    action_button_short:
      name: (Optional)  Button short press
      description: Action to run on short button press.
      default: []
      selector:
        action: {}
    action_button_long:
      name: (Optional)  Button long press
      description: Action to run on long button press.
      default: []
      selector:
        action: {}
    action_button_double:
      name: (Optional) Button double press
      description: Action to run on double button press.
      default: []
      selector:
        action: {}
    helper_double_press_delay:
      name: (Optional) Helper - Double Press delay
      description:
        Max delay between the first and the second button press for the
        double press event. Provide a value only if you are using a double press action.
        Increase this value if you notice that the double press action is not triggered
        properly.
      default: 500
      selector:
        number:
          min: 100.0
          max: 5000.0
          unit_of_measurement: milliseconds
          mode: box
          step: 10.0
    helper_debounce_delay:
      name: (Optional) Helper - Debounce delay
      description:
        Delay used for debouncing RAW controller events, by default set
        to 0. A value of 0 disables the debouncing feature. Increase this value if
        you notice custom actions or linked Hooks running multiple times when interacting
        with the device. When the controller needs to be debounced, usually a value
        of 100 is enough to remove all duplicate events.
      default: 0
      selector:
        number:
          min: 0.0
          max: 1000.0
          unit_of_measurement: milliseconds
          mode: box
          step: 10.0
variables:
  integration: Zigbee2MQTT
  helper_last_controller_event: !input helper_last_controller_event
  helper_double_press_delay: !input helper_double_press_delay
  helper_debounce_delay: !input helper_debounce_delay
  integration_id: "zigbee2mqtt"
  adjusted_double_press_delay: "{{ [helper_double_press_delay - helper_debounce_delay, 100] | max }}"
  actions_mapping:
    zigbee2mqtt:
      button_short: ["single"]
      button_long: ["long"]
      button_double: ["double"]
  button_short: "{{ actions_mapping.zigbee2mqtt.button_short }}"
  button_long: "{{ actions_mapping.zigbee2mqtt.button_long }}"
  button_double: "{{ actions_mapping.zigbee2mqtt.button_double }}"
  controller_entity: !input controller_entity
  controller_id: "{{controller_entity}}"
mode: restart
max_exceeded: silent
trigger:
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity
condition:
  - condition: and
    conditions:
      - '{%- set trigger_action -%} {%- if integration_id == "zigbee2mqtt" -%} {{ trigger.event.data.new_state.state
        }} {{"_" if trigger.event.data.args|length
        > 0}}{{ trigger.event.data.args|join("_") }} {%- endif -%} {%- endset -%} {{ trigger_action
        not in ["","None"] }}'
      - '{{ integration_id != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state
        }}'
action:
  - delay:
      milliseconds: !input helper_debounce_delay
  - variables:
      trigger_action: "{{ trigger.event.data.new_state.state }}"
      trigger_delta: '{{ (as_timestamp(now()) - ((states(helper_last_controller_event) | from_json).t if helper_last_controller_event is not none else as_timestamp("1970-01-01 00:00:00"))) * 1000 }}'
      last_controller_event: '{{ (states(helper_last_controller_event) | from_json).a if helper_last_controller_event is not none else "" }}'
  - service: input_text.set_value
    data:
      entity_id: !input helper_last_controller_event
      value: '{{ {"a":trigger_action,"t":as_timestamp(now())} | to_json }}'
  - choose:
      - conditions: "{{ trigger_action in button_double }}"
        sequence:
          - event: button_event
            event_data:
              action: double_press
          - choose:
              - conditions: []
                sequence: !input action_button_double

      - conditions: "{{ trigger_action in button_long }}"
        sequence:
          - event: button_event
            event_data:
              action: long_press
          - choose:
              - conditions: []
                sequence: !input action_button_long

      - conditions: "{{ trigger_action in button_short }}"
        sequence:
          - event: button_event
            event_data:
              action: short_press
          - choose:
              - conditions: []
                sequence: !input action_button_short
